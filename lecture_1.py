numb____456789 = 10

# Базовые типы данных

# 1 - целые числа - int

a = 10
b = 20
c = a + b
d = a - b
"""
Неизменяемый тип данных
Простой тип данных

Действия
+
-
*
/
** возведение в степень
// целочисленное деление
% остаток от деления

13 % 5 -> 3
13 // 5 -> 2

"""

# 2 десятичные дроби - float

fl = 124.567

# 3 строки (текстовый тип данных) - str

s = 'ldsiuhfg374ty8'
s2 = '111'

"""
Строки пишутся в ковычках
Неизменяемый тип данных
Составной тип данных

"""

# логический тип - bool

t = True
f = False

# TODO Рассказать про действия


# Ничего - None

n = None

# Составные типы

# Списки - list
"""
Изменяемый тип данных


"""

# создание списка
my_list = []  # пустой список
my_list_empty = list()  # пустой список

#            0  1     2      3      4     5    6
my_list_2 = [1, 2, 'wer33', True, False, None, a, b, c, my_list, my_list_empty]  # Список с элементами

test_list_1 = [1, 2, 3]
test_list_2 = [my_list_2, test_list_1]

print(test_list_1)
print(test_list_2)
test_list_1.append('text')
print(test_list_1)
print(test_list_2)

# работа со списками
"""
индексация
список    [1, 2, 3, 4]
индексы    0  1  2  3
"""
# получение элемента списка

elem1 = my_list_2[0]  # получаем первый элемент списка
elem2 = my_list_2[1]  # получаем второй элемент списка
elem3 = my_list_2[2]  # получаем третий элемент списка

# Перезапись элемента списка
my_list_2[2] = 999
"""
Важно, чтобы элемент с таким индексом был в списке, иначе будет ошибка выполнения программы
"""

print(elem1, elem2, elem3)

# срез списка - slice
"""
my_list_2[start:stop:step]

"""
slice_1 = my_list_2[2:5]  # срез с третьего по шестой элемент не включая его
print(slice_1)
slice_2 = my_list_2[:5]  # начиная с первого
slice_3 = my_list_2[2:]  # вплоть до последнего
slice_4 = my_list_2[2:5:2]  # С шагом через один
slice_5 = my_list_2[5:2:-1]  # В обратную сторону шаг отрицательный

# Методы списка

my_list.append('add to end')  # добавление в конец списка

my_list.insert(2, 'element to insert')  # вставка на конкретную позицию списка

"""        0  1  2
my_list = [1, 2, 3]

my_list.insert(1, 99) 
            0  1   2  3
my_list -> [1, 99, 2, 3]

my_list.insert(10, 88)  
my_list -> [1, 99, 2, 3, 88]
"""

my_list.pop(0)  # забрать элемент из списка по индексу

"""        0  1  2
my_list = [1, 2, 3]

elem = my_list.pop(0)  # Забрали первый элемент списка

my_list -> [2, 3]
elem -> 1
"""

# Кортеж - tuple

my_tuple = (1, 2, 3)
my_tuple_2 = 1, 6, 8

"""
Неизменяемый список

Аналогичен списку, но его нельзя менять
"""

# Множество - set

my_set = set()  # Пустое множество
my_set2 = {1, 4, 5, 6}  # множество с элементами

"""
Изменяемы тип
Внутри все значения уникальны и не повторяются, даже если их добавить
Внутри могут быть только неизменяемые типы данных


"""
my_set3 = {1, 4, 5, 6, 1, 1, 1, 1}
print(my_set3)

my_set2.add(90)

# словарь - dict

"""
Таблица из двух колок ключ: значение
Изменяемы тип
"""
my_dict1 = {}  # Пустой словарь
my_dict2 = dict()  # Пустой словарь

my_dict3 = {1: 123, '23': 444}  # словарь с элементами
"""
Ключом может быть только неизменяемый тип данных - 
почти всегда int, str, реже tuple, почти никогда float, bool, None
Ключом не может быть list, set, dict - это изменяемые типы

Значение может быть любым

Ключи мы обычно либо знаем, либо нам их дают, либо придумываем сами
"""

# Доступ к элементам словаря
elem1 = my_dict3[1]  # Доступ к элементу по ключу
print(my_dict3[1])

# Добавление или перезапись элементов
print(my_dict3)
my_dict3[1] = 999  # Перезапись, если этот ключ есть в словаре
print(my_dict3)
my_dict3['no key'] = 78  # Добавление, если такого ключа нет в словаре
print(my_dict3)

man_1 = {
    'Рост': 180,
    "Вес": 80
}
man_2 = {
    'Рост': 185,
    "Вес": 76
}
man_3 = {
    'Рост': 168,
    "Вес": 58
}
print('man_1', man_1)
print('man_2', man_2)
print('man_3', man_3)

man_list = [man_1, man_2, man_3, man_1]
print(man_list)
man_1['Рост'] = 189
print(man_list)

print('Я внёс изменения в гот')
